#+TITLE: John's emacs config

* My settings
#+BEGIN_SRC emacs-lisp
;; nothing for now!
#+END_SRC

* Basics
** Helping hands
#+BEGIN_SRC emacs-lisp
  (defun from-userdir (path)
    "Expand relative PATH from `user-emacs-directory`"
    (expand-file-name path user-emacs-directory))

  (defun edit-user-config ()
    "Edit the main configuration file"
    (interactive)
    (find-file-other-frame user-config-source-file))

  (defun config-reinit ()
    "Reload init.el"
    (interactive)
    (load (from-userdir "init.el")))

  (defun kill-this-buffer-now ()
    "The name"
    (interactive)
    (thread-first (window-buffer)
      kill-buffer))

  (defmacro make-alias (var &rest syms)
    "Alias all of SYMS to VAR"
    (append '(progn)
            (mapcar (lambda (s) (list 'defvaralias s var)) syms)))

  (defmacro defkeymap (name &rest keys)
    "Create a new keymap bound to NAME with `bind-keys` style
    bindings from KEYS"
    `(progn
       (setq ,name (make-sparse-keymap))
       (bind-keys
        :map ,name
        ,@keys)
       ',name))
#+END_SRC

** Configure default behavior
#+BEGIN_SRC emacs-lisp
  ;; ahhhhhhhhhhhhh
  (setq ring-bell-function 'ignore)

  ;; y is y
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; backups
  (setq backup-directory-alist `((".*" . ,(from-userdir "backup")))
        auto-save-default nil
        create-lockfiles nil
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; how many of the newest versions to keep
        kept-old-versions 5    ; and how many of the old
        )

  ;; colors!
  (load-theme 'wombat)

  ;; Shrink fringes to 1 pixel.
  (fringe-mode 1)

  ;; font size
  (set-face-attribute 'default nil :height 120)

  ;; flat modeline
  (set-face-attribute 'mode-line nil :box nil)
  (set-face-attribute 'mode-line-inactive nil :box nil)

  ;; turn off stupid bars (in order of greatest annoyance)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; truncate minibuffer display
  (setq message-truncate-lines t)

  ;; prog-mode settings
  (defun prog-mode-init ()
    (display-line-numbers-mode)
    (setq display-line-numbers 'relative))
  (add-hook 'prog-mode-hook #'prog-mode-init)

  ;; line flow
  (setq-default fill-column 80)

  ;; narrow?
  (put 'narrow-to-region 'disabled nil)

  ;; self-care
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-echo-area-message "This aint your dad's spacemacs")
  (setq initial-scratch-message ";; 頑張って!\n\n")

  ;; add user modules to load path
  (add-to-list 'load-path (expand-file-name "vendor"
                                            user-emacs-directory))

  ;; org-mode
  (require 'org)
  (setq-default org-confirm-babel-evaluate nil)
  (setq org-image-actual-width '(400))

  ;; enable package manager
  (require 'straight-init)
#+END_SRC

** Custom Hooks
#+BEGIN_SRC emacs-lisp
#+END_SRC

** Editor stuff
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs
          '("~/.config/snip"))
    (yas-global-mode 1))

  (use-package frames-only-mode
    :config (frames-only-mode 1))

  (use-package which-key
    :config (which-key-mode 1))

  (use-package undo-tree
    :config (global-undo-tree-mode 1))

  (use-package ivy
    :config
    (ivy-mode 1))

  (use-package counsel
    :after (ivy)
    :config
    (counsel-mode 1))

  (use-package swiper
    :after (ivy)
    :config
    (global-set-key [remap isearch-forward] 'swiper-isearch)
    (global-set-key [remap isearch-backward] 'swiper-isearch-backward))

  (setq ivy-initial-inputs-alist nil)

  (use-package company
    :config (global-company-mode 1))

  (use-package sunrise
    :straight (sunrise :type git
                       :host github
                       :repo "sunrise-commander/sunrise-commander"))

  ;;(use-package vterm)
#+END_SRC

** Mac
#+BEGIN_SRC emacs-lisp
  (when (string-equal system-type "darwin")
    (add-to-list 'exec-path "/usr/local/bin"))
#+END_SRC
** Markup
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode "\\.yml\\'")

  (use-package markdown-mode
    :mode "\\.md\\'"
    :config
    (setq-default markdown-hide-markup t
                  markdown-hide-urls t))
#+END_SRC

** Eshell
#+BEGIN_SRC emacs-lisp
  (require 'eshell)

  (defun eshell/clear ()
    "Actually clear eshell"
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer)))
#+END_SRC

** Innernet
#+BEGIN_SRC emacs-lisp
  (use-package w3m
    :disabled)

  (use-package web-search
    :init (setq web-search-default-provider "DuckDuckGo")
    :bind ("C-c w" . web-search))
#+END_SRC

** Keys
#+BEGIN_SRC emacs-lisp
  ;; Global binds
  (bind-keys
   ;; Navigation
   ("C-l" . forward-char)
   ("C-h" . backward-char)
   ("C-j" . next-line)
   ("C-k" . previous-line)
   ("C-S-l" . move-end-of-line)
   ("C-S-h" . move-beginning-of-line)
   ("M-l" . forward-word)
   ("M-h" . backward-word)
   ("M-j" . forward-paragraph)
   ("M-k" . backward-paragraph)

   ;; Editing
   ("C-S-j" . join-line)

   ;; Ibuffer
   ([remap list-buffers] . ibuffer)

   ;; Font size
   ("C-=" . text-scale-increase)
   ("C--" . text-scale-decrease)
   ("C-+" . (lambda () (interactive) (text-scale-set 0)))

   ;; Config
   ("<f9>"  . config-reinit)
   ("<f12>" . edit-user-config))

  ;; Command mode
  (setq command-mode-map (make-sparse-keymap))

  (bind-keys
   :map command-mode-map
   ;; Navigation
   ("l" . forward-char)
   ("h" . backward-char)
   ("j" . next-line)
   ("k" . previous-line)
   ("M-l" . forward-word)
   ("M-h" . backward-word)
   ("M-j" . forward-paragraph)
   ("M-k" . backward-paragraph)
   ("S-l" . move-end-of-line)
   ("S-h" . move-beginning-of-line)

   ;; Editing
   ("d" . kill-region)
   ("y" . kill-ring-save)
   ("p" . yank)
   ("S-j" . join-line)

   ;; Selection
   ("v" . set-mark-command)
   ("S-v" . rectangle-mark-mode))

  (define-minor-mode command-mode
    "Move in directions!"
    :keymap command-mode-map)

  ;; Leader
  (setq leader-command-map (make-sparse-keymap))
  (bind-key "M-SPC" leader-command-map)

  ;; Help me
  (bind-key "h" help-map leader-command-map)

  ;; General commands
  (bind-keys
   :map leader-command-map
   ;; Exec commands
   ("<SPC>" . counsel-M-x)

   ;; Interactive search
   ("n" . swiper-isearch)
   ("N" . swiper-isearch-backward))

  ;; Buffers
  (bind-keys
   :map leader-command-map
   :prefix-map leader-buffers-map
   :prefix "b"
   ("f" . find-file)
   ("g" . counsel-git)
   ("b" . switch-to-buffer)
   ("r" . revert-buffer)
   ("k" . kill-this-buffer-now)
   ("s" . save-buffer))

  ;; Frames
  (bind-keys
   :map leader-command-map
   :prefix-map leader-frames-map
   :prefix "f"
   ("f" . make-frame-command)
   ("k" . delete-frame))

  ;; Monkeypatching
  (bind-keys
   :map org-mode-map
   ("C-j" . next-line))
#+END_SRC

* Programming
** General
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 2
                standard-indent 2
                sh-basic-offset 2)

  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)))

  (use-package smartparens
    :hook ((prog-mode . smartparens-mode))
    :bind
    (:map prog-mode-map
          ("M-l" . sp-forward-sexp)
          ("M-h" . sp-backward-sexp)
          ("C-M-k" . sp-forward-slurp-sexp)
          ("C-s-k" . sp-forward-barf-sexp)
          ("C-M-j" . sp-backward-slurp-sexp)
          ("C-s-j" . sp-backward-barf-sexp)))
#+END_SRC

** IDE things
#+BEGIN_SRC emacs-lisp
  (use-package project-el
    :disabled
    :straight (project-el :type git
                          :host github
                          :repo "jorgenschaefer/project-el"
                          :files ("project.el")))

  (use-package eglot
    :after (project-el))

  (use-package flycheck
    :config (global-flycheck-mode 1))

  (use-package expand-region
    :bind (:map leader-command-map
                ("." . 'er/expand-region)))

  (use-package projectile)

  (use-package magit
    :config (setq project-switch-commands nil))

  (use-package direnv
    :config (direnv-mode))

  (use-package nix-mode
    :mode "\\.nix\\'")
#+END_SRC

** C/C++
#+BEGIN_SRC emacs-lisp
  ;;(use-package helm-gtags)

  (defun gtags-root-dir ()
    "Returns GTAGS root directory or nil if doesn't exist."
    (with-temp-buffer
      (if (zerop (call-process "global" nil t nil "-pr"))
          (buffer-substring (point-min) (1- (point-max)))
        nil)))

  (defun gtags-update ()
    "Make GTAGS incremental update"
    (call-process "global" nil nil nil "-u"))

  (defun gtags-update-hook ()
    (when (gtags-root-dir)
      (gtags-update)))

  (defun add-gtags-hook ()
    (add-hook 'after-save-hook #'gtags-update-hook 0 t))

  ;;(add-hook 'c-mode-hook #'add-gtags-hook)
#+END_SRC

** Lisp
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clj-kondo
    :after (flycheck cider)) 

  (use-package cider
    :init
    (setq-default clojure-indent-style 'align-arguments)
    (setq org-babel-clojure-backend 'cider)
    (require 'ob-clojure)
    :bind
    (:map cider-mode-map
          ;; Eval and print top-level form in tooltip
          ("C-c C-x" . cider-eval-defun-at-point)
          ;; Eval and pretty-print top-level form to next line
          ("C-c C-f" . cider-pprint-eval-defun-to-comment))
    :config
    (setq cider-print-fn 'fipp)
    (setq clojure-toplevel-inside-comment-form t)

    ;; Format pretty-printed comments to appear as evaluation output
    (setq cider-comment-prefix "\n  #_=> ")
    (setq cider-comment-continued-prefix "       ")
    (setq cider-comment-postfix "\n")

    (setq cider-clojure-cli-parameters "-A:dev -m nrepl.cmdline --middleware '%s'")
    (setq cider-shadow-cljs-command "clojure -A:shadow-cljs")
    (require 'flycheck-clj-kondo))
#+END_SRC

** Javascript
#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2
        js-switch-indent-offset 2)

  (use-package rjsx-mode
    :mode (("\\.js\\'"  . rjsx-mode)
           ("\\.ts\\'"  . rjsx-mode)
           ("\\.tsx\\'" . rjsx-mode))
    :config (setq js2-strict-missing-semi-warning nil))

  (use-package coffee-mode)

  (use-package svelte-mode)

  (use-package qml-mode)

  (use-package haxe-mode)

  (use-package vue-mode)

  (use-package tide
    :after (rjsx-mode flycheck)
    :hook ((rjsx-mode . tide-setup)
           (rjsx-mode . tide-hl-identifier-mode)))
  
  (use-package php-mode)
  (use-package web-mode)
#+END_SRC

** Snake
#+BEGIN_SRC emacs-lisp
  (setq python-indent-offset 2)

  (use-package pipenv
    :hook (python-mode . pipenv-mode)
    :init
    (setq pipenv-projectile-after-switch-function
          #'pipenv-projectile-after-switch-extended))
#+END_SRC

** Gophers
#+BEGIN_SRC emacs-lisp
  (use-package go-mode)
#+END_SRC

** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode)
#+END_SRC

** Zig
#+BEGIN_SRC emacs-lisp
  (use-package zig-mode
    :after (eglot)
    :config
    (add-to-list 'eglot-server-programs '(zig-mode . ("zls")))
    (add-hook 'zig-mode-hook 'eglot-ensure))
#+END_SRC
